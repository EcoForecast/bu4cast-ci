---
title: "Forecast performance"
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
```

```{r setup}
library(ggiraph)
library(dplyr)
library(ggplot2)
library(glue)
source("R/plot-utils.R")
#source("../R/ignore_sigpipes.R")
#ignore_sigpipe()


```

## Most recent forecasts

```{r}
cutoff <- as.character(Sys.Date() - 30)
combined <- arrow::open_dataset("../cache/duration=P1D") |> 
  filter(date >= cutoff) |> collect()


config <- yaml::read_yaml("../challenge_configuration.yaml")
sites <- readr::read_csv(paste0("../", config$site_table), show_col_types = FALSE)

df <- combined |> 
  left_join(sites, by = "site_id") |> 
  filter(site_id %in% sites$site_id) |> 
  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),
         datetime = lubridate::as_datetime(datetime))

reference_date <- max(lubridate::as_date(df$reference_datetime))
```

Forecasts submitted on `r reference_date`

#### Chlorophyll-a

```{r}
df |> 
  filter(lubridate::as_date(reference_datetime) > max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
        lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("Chla_ugL_mean"),
         ((depth_m == 1.6 & site_id == "fcre") | (depth_m == 1.5 & site_id == "bvre"))) |> 
  forecast_plots()
```

#### Water temperature

```{r}
df |> 
  filter(lubridate::as_date(reference_datetime) > max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         variable == c("Temp_C_mean"),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         ((depth_m == 1.6 & site_id == "fcre") | (depth_m == 1.5 & site_id == "bvre"))) |>  
  forecast_plots()
```

#### Air temperature

```{r}
df |> 
  filter(lubridate::as_date(reference_datetime) > max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("AirTemp_C_mean")) |> 
  forecast_plots()
```

#### Inflow discharge

```{r}
df |> 
  filter(lubridate::as_date(reference_datetime) > max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("Flow_cms_mean")) |> 
  forecast_plots()
```

## Forecast analysis

```{r}
sites <- combined |> distinct(site_id) |> collect() |> slice_head(n= 6) |> pull(site_id)
## with at least n observations to compare!

ref <- Sys.Date() - lubridate::days(10)

ref <- max(c(ref, 
             min(lubridate::as_date(combined$reference_datetime)),
             lubridate::as_date("2023-10-14")))

#n_data <- 10
#who <- combined |> filter(!is.na(observation)) |> summarise(has_data = max(reference_datetime)) |> collect()
#ref <- as.character ( as.Date(who$has_data[[1]]) - n_data )
ex <- combined |> filter(reference_datetime == ref, site_id %in% sites) 

```

Below are forecasts submitted 30 days ago and include the observations used to evaluate them. Mouse over to see the team id, scroll to zoom.

::: panel-tabset
### Chla_ugL_mean

```{r}
ex |> filter(variable == "Chla_ugL_mean",
            ((depth_m == 1.6 & site_id == "fcre") | 
            (depth_m == 1.5 & site_id == "bvre"))) |> forecast_plots()
```

### Temp_C_mean

```{r}
ex |> filter(variable == "Temp_C_mean",
         (site_id == "tubr" | 
            (depth_m == 1.6 & site_id == "fcre") | 
            (depth_m == 1.5 & site_id == "bvre"))) |> 
  forecast_plots()
```

### AirTemp_C_mean

```{r}
ex |> filter(variable == "AirTemp_C_mean") |> forecast_plots()
```
:::

## Leaderboard

Average skill scores of each model across all sites.\

Scores are shown by reference date and forecast horizon (in days).\

Scores are averaged across all submissions of the model with a given horizon or a given `reference_datetime` using submissions made since `r cutoff`.\

::: panel-tabset
## Chla_ugL_mean

```{r}
leaderboard_plots(combined, "Chla_ugL_mean")
```

## Temp_C_mean

```{r}
leaderboard_plots(combined, "Temp_C_mean")
```
## AirTemp_C_mean

```{r}
leaderboard_plots(combined, "AirTemp_C_mean")
```
:::
